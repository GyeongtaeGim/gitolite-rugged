{"name":"Gitolite-rugged","tagline":"A Ruby interface for the Gitolite Git backend system","body":"## gitolite-rugged\r\n[![Build Status](https://travis-ci.org/jbox-web/gitolite-rugged.svg?branch=devel)](https://travis-ci.org/jbox-web/gitolite-rugged)\r\n[![Code Climate](https://codeclimate.com/github/jbox-web/gitolite-rugged/badges/gpa.svg)](https://codeclimate.com/github/jbox-web/gitolite-rugged)\r\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=FBT7E7DAVVEEU)\r\n\r\n### This gem is a fork from the [jbox-gitolite](https://github.com/jbox-web/gitolite) gem employing [libgit2/rugged](https://github.com/libgit2/rugged).\r\n\r\n\r\nThis gem is designed to provide a Ruby interface to the [Gitolite](https://github.com/sitaramc/gitolite) Git backend system.\r\n\r\nIt provides these functionalities :\r\n\r\n* SSH Public Keys Management\r\n* Repositories Management\r\n* Gitolite Admin Repository Bootstrapping\r\n\r\n## Requirements ##\r\n* Ruby 1.9.x or 2.0.x\r\n* a working [gitolite](https://github.com/sitaramc/gitolite) installation\r\n* The [rugged](https://github.com/libgit2/rugged) bindings to libgit2 with SSH-key credentials added (Version >= 0.21 or dev branch).\r\n\r\n## Installation ##\r\n\r\nPut this in your ```Gemfile``` :\r\n\r\n    gem 'gitolite-rugged', git: 'https://github.com/jbox-web/gitolite-rugged.git', branch: 'v1.0.0'\r\n\r\nthen\r\n\r\n    bundle install\r\n\r\n\r\n## Usage ##\r\n\r\n### Bootstrapping the gitolite-admin.git repository ###\r\n\r\nYou can have `gitolite-rugged` clone the repository for you on demand, however I would recommend cloning it manually.\r\nSee it as a basic check that your gitolite installation was correctly set up.\r\n\r\nIn both cases, use the following code to create an instance of the manager:\r\n\r\n\tsettings = { :public_key => '~/.ssh/id_rsa.pub', :private_key => '~/.ssh/id_rsa' }\r\n\tadmin = Gitolite::GitoliteAdmin.new('/home/myuser/gitolite-admin', settings)\r\n\r\nFor cloning and pushing to the gitolite-admin.git, you have to provide several options to `GitoliteAdmin` in the settings hash. The following keys are used.\r\n\r\n* **:git_user** The git user to SSH to (:git_user@localhost:gitolite-admin.git), defaults to 'git'\r\n* **:host** Hostname for clone url. Defaults to 'localhost'\r\n* **:private_key** The key file containing the private SSH key for :git_user\r\n* **:public_key** The key file containing the public SSH key for :git_user\r\n* **:author_name:** The git author name to commit with (default: 'gitolite-rugged gem')\r\n* **:author_email** The git author e-mail address to commit with (default: 'gitolite-rugged@localhost')\r\n* **:commit_msg** The commit message to use when updating the repo (default: 'Commited by the gitolite-rugged gem')\r\n\r\n### Managing Public Keys ###\r\n\r\nTo add a key, create a `SSHKey` object and use the `add_key(key)` method of GitoliteAdmin.\r\n\r\n\t# From filesystem\r\n\tkey_from_file = SSHKey.from_file(\"/home/alice/.ssh/id_rsa.pub\")\r\n\r\n\t# From String, which requires us to add an owner manually\r\n\tkey_from_string = SSHKey.from_string('ssh-rsa AAAAB3N/* .... */JjZ5SgfIKab bob@localhost', 'bob')\r\n\r\n\tadmin.add_key(key_from_string)\r\n\tadmin.add_key(key_from_file)\r\n\r\nNote that you can add a *location* using the syntax described in [the Gitolite documentation](http://gitolite.com/gitolite/users.html#old-style-multi-keys).\r\n\r\n\r\nTo write out the changes to the keys to the filesystem and push them to gitolite, call `admin.save_and_apply`.\r\nYou can also manually call `admin.save` to commit the changes locally, but not push them.\r\n\r\n\r\n### Managing Repositories ###\r\n\r\nTo add a new repository, we first create and configure it, and then add it to the memory representation of gitolite:\r\n\r\n\trepo = Gitolite::Config::Repo.new('foobar')\r\n\trepo.add_permission(\"RW+\", \"alice\", \"bob\")\r\n\r\n\t# Add the repo\r\n\tadmin.config.add_repo(repo)\r\n\r\nTo remove a repository called 'foobar', execute `config.rm_repo('foobar')`.\r\n\r\n\r\n### Groups ###\r\n\r\nAs in the [Gitolite Config](http://gitolite.com/gitolite/groups.html) you can define groups as an alias to repos or users.\r\n\r\n\t# Creating a group\r\n\tdevs = Gitolite::Config::Group.new('developers')\r\n\tdevs.add_users(\"alice\", \"bob\")\r\n\r\n\t# Adding a group to config\r\n\tadmin.config.add_group(devs)\r\n\r\n\r\n\r\n## Copyrights & License\r\ngitolite-rugged is completely free and open source and released under the [MIT License](https://github.com/oliverguenther/gitolite/blob/devel/LICENSE.txt).\r\n\r\nCopyright (c) 2015 Nicolas Rodriguez (nrodriguez@jbox-web.com), JBox Web (http://www.jbox-web.com)\r\n\r\nCopyright (c) 2014 Oliver GÃ¼nther (mail@oliverguenther.de)\r\n\r\nBased on the jbox-gitolite fork by Nicolas Rodriguez, which itself is based on the original gitolite gem by Stafford Brunk.\r\n\r\nCopyright (c) 2013-2014 Nicolas Rodriguez (nrodriguez@jbox-web.com), JBox Web (http://www.jbox-web.com)\r\n\r\nCopyright (c) 2011-2013 Stafford Brunk (stafford.brunk@gmail.com)\r\n","google":"UA-36504891-3","note":"Don't delete this file! It's used internally to help with page regeneration."}