{"name":"gitolite-rugged","tagline":"A Ruby interface to manage the Gitolite Git backend system, easy ;)","body":"[![GitHub license](https://img.shields.io/github/license/jbox-web/gitolite-rugged.svg)](https://github.com/jbox-web/gitolite-rugged/blob/devel/LICENSE)\r\n[![GitHub release](https://img.shields.io/github/release/jbox-web/gitolite-rugged.svg)](https://github.com/jbox-web/gitolite-rugged/releases/latest)\r\n[![Build Status](https://travis-ci.org/jbox-web/gitolite-rugged.svg?branch=devel)](https://travis-ci.org/jbox-web/gitolite-rugged)\r\n[![Code Climate](https://codeclimate.com/github/jbox-web/gitolite-rugged/badges/gpa.svg)](https://codeclimate.com/github/jbox-web/gitolite-rugged)\r\n[![Dependency Status](https://gemnasium.com/jbox-web/gitolite-rugged.svg)](https://gemnasium.com/jbox-web/gitolite-rugged)\r\n\r\nThis gem is designed to provide a Ruby interface to the [Gitolite](https://github.com/sitaramc/gitolite) Git backend system via [libgit2/rugged](https://github.com/libgit2/rugged) gem.\r\n\r\nIt provides these functionalities :\r\n\r\n* SSH Public Keys Management\r\n* Repositories Management\r\n* Gitolite Admin Repository Bootstrapping\r\n\r\n## Requirements\r\n\r\n* Ruby 2.x\r\n* a working [Gitolite](https://github.com/sitaramc/gitolite) installation\r\n\r\n## Installation\r\n\r\nInstall dependencies :\r\n\r\n```sh\r\n# On Debian/Ubuntu\r\nroot# apt-get install build-essential libssh2-1 libssh2-1-dev cmake libgpg-error-dev\r\n\r\n# On Fedora/CentoS/RedHat\r\nroot# yum groupinstall \"Development Tools\"\r\nroot# yum install libssh2 libssh2-devel cmake libgpg-error-devel\r\n```\r\n\r\nThen put this in your ```Gemfile``` :\r\n\r\n```ruby\r\ngem 'gitolite-rugged', git: 'https://github.com/jbox-web/gitolite-rugged.git', tag: '1.2.0'\r\n```\r\n\r\nthen `bundle install`.\r\n\r\n## Usage\r\n\r\n### Bootstrapping the gitolite-admin.git repository\r\n\r\nYou can have `gitolite-rugged` clone the repository for you on demand, however I would recommend cloning it manually.\r\nSee it as a basic check that your gitolite installation was correctly set up.\r\n\r\nIn both cases, use the following code to create an instance of the manager:\r\n\r\n```ruby\r\nsettings = { :public_key => '~/.ssh/id_rsa.pub', :private_key => '~/.ssh/id_rsa' }\r\nadmin = Gitolite::GitoliteAdmin.new('/home/myuser/gitolite-admin', settings)\r\n```\r\n\r\nFor cloning and pushing to the gitolite-admin.git, you have to provide several options to `GitoliteAdmin` in the settings hash. The following keys are used.\r\n\r\n      Option      |  Description\r\n------------------|-------------\r\n**:git_user**     | The git user to SSH to (:git_user@localhost:gitolite-admin.git), defaults to 'git'\r\n**:hostname**     | Hostname for clone url. Defaults to 'localhost'\r\n**:private_key**  | The key file containing the private SSH key for :git_user\r\n**:public_key**   | The key file containing the public SSH key for :git_user\r\n**:author_name:** | The git author name to commit with (default: 'gitolite-rugged gem')\r\n**:author_email** | The git author e-mail address to commit with (default: 'gitolite-rugged@localhost')\r\n**:commit_msg**   | The commit message to use when updating the repo (default: 'Commited by the gitolite-rugged gem')\r\n\r\n### Managing Public Keys\r\n\r\nTo add a key, create a `SSHKey` object and use the `add_key(key)` method of GitoliteAdmin.\r\n\r\n```ruby\r\n# From filesystem\r\nkey_from_file = SSHKey.from_file(\"/home/alice/.ssh/id_rsa.pub\")\r\n\r\n# From String, which requires us to add an owner manually\r\nkey_from_string = SSHKey.from_string('ssh-rsa AAAAB3N/* .... */JjZ5SgfIKab bob@localhost', 'bob')\r\n\r\nadmin.add_key(key_from_string)\r\nadmin.add_key(key_from_file)\r\n```\r\n\r\nNote that you can add a *location* using the syntax described in [the Gitolite documentation](http://gitolite.com/gitolite/users.html#old-style-multi-keys).\r\n\r\nTo write out the changes to the keys to the filesystem and push them to gitolite, call `admin.save_and_apply`.\r\nYou can also manually call `admin.save` to commit the changes locally, but not push them.\r\n\r\n\r\n### Managing Repositories\r\n\r\nTo add a new repository, we first create and configure it, and then add it to the memory representation of gitolite:\r\n\r\n```ruby\r\nrepo = Gitolite::Config::Repo.new('foobar')\r\nrepo.add_permission(\"RW+\", \"alice\", \"bob\")\r\n\r\n# Add the repo\r\nadmin.config.add_repo(repo)\r\n```\r\n\r\nTo remove a repository called 'foobar', execute `config.rm_repo('foobar')`.\r\n\r\n\r\n### Groups\r\n\r\nAs in the [Gitolite Config](http://gitolite.com/gitolite/groups.html) you can define groups as an alias to repos or users.\r\n\r\n```ruby\r\n# Creating a group\r\ndevs = Gitolite::Config::Group.new('developers')\r\ndevs.add_users(\"alice\", \"bob\")\r\n\r\n# Adding a group to config\r\nadmin.config.add_group(devs)\r\n```\r\n\r\n## See also\r\n\r\nYou can checkout the no longer maintain previous version of this lib : [jbox-gitolite](https://github.com/jbox-web/gitolite) (based on [gitlab-grit](https://github.com/gitlabhq/grit)).\r\n\r\n## Contribute\r\n\r\nYou can contribute to this plugin in many ways such as :\r\n* Helping with documentation\r\n* Contributing code (features or bugfixes)\r\n* Reporting a bug\r\n* Submitting translations\r\n","google":"UA-36504891-3","note":"Don't delete this file! It's used internally to help with page regeneration."}